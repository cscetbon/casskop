"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2758],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>k});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=n.createContext({}),c=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,k=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return t?n.createElement(k,s(s({ref:a},p),{},{components:t})):n.createElement(k,s({ref:a},p))}));function k(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[d]="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=t[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7354:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=t(7462),r=(t(7294),t(3905));const o={title:"Pods Operations",sidebar_label:"Pods Operations"},s=void 0,l={unversionedId:"operations/pods_operations",id:"operations/pods_operations",title:"Pods Operations",description:"Here is the list of Operations managed by CassKop at the Pod operations level, which apply at pod level and can be triggered by specifics pods labels. Status of pod operations are also followed up at rack level.",source:"@site/docs/5_operations/2_pods_operations.md",sourceDirName:"5_operations",slug:"/operations/pods_operations",permalink:"/casskop/docs/operations/pods_operations",draft:!1,editUrl:"https://github.com/cscetbon/casskop/edit/master/website/docs/5_operations/2_pods_operations.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Pods Operations",sidebar_label:"Pods Operations"},sidebar:"docs",previous:{title:"Cluster Operations",permalink:"/casskop/docs/operations/cluster_operations"},next:{title:"Multi-CassKop",permalink:"/casskop/docs/operations/multi_casskop"}},i={},c=[{value:"OperationCleanup",id:"operationcleanup",level:2},{value:"OperationRebuild",id:"operationrebuild",level:2},{value:"OperationDecommission",id:"operationdecommission",level:2},{value:"RollingRestart",id:"rollingrestart",level:2}],p={toc:c},d="wrapper";function u(e){let{components:a,...t}=e;return(0,r.kt)(d,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Here is the list of Operations managed by CassKop at the ",(0,r.kt)("strong",{parentName:"p"},"Pod operations")," level, which apply at pod level and can be triggered by specifics pods labels. Status of pod operations are also followed up at rack level."),(0,r.kt)("p",null,"Some Pods Operations can be triggered automatically by CassKop if :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CassandraCluster.spec.autoPilot")," is true, that will trigger ",(0,r.kt)("inlineCode",{parentName:"li"},"cleanup"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"rebuild")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"upgadesstable")," operation in\nresponse to cluster events automatically."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"decommission operation")," is special and will be triggered automatically each time we need to ScaleDown a Pod."),(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"removenode operation")," is also special and may be set manually when needed.")),(0,r.kt)("p",null,'It is also possible to trigger operations "manually", setting some labels on the Pods.'),(0,r.kt)("h2",{id:"operationcleanup"},"OperationCleanup"),(0,r.kt)("p",null,"A Cleanup may be automatically triggered by CassKop when it ends Scaling the cluster.\nCassKop will set some specific labels on the targeted pods.\nWe can also set these labels manually, or using the privided plugin (",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl casskop cleanup start"),")\nIf we want to see labels for each of the pods of the cluster :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl label pod $(kubectl get pods -l app=cassandracluster -o jsonpath='{range .items[*]}{.metadata.name}{\" \"}') --list\nListing labels for Pod./cassandra-demo-dc1-rack1-0:\n cluster=k8s.pic\n controller-revision-hash=cassandra-demo-dc1-rack1-56c9bbb958\n dc-rack=dc1-rack1\n statefulset.kubernetes.io/pod-name=cassandra-demo-dc1-rack1-0\n app=cassandracluster\n cassandracluster=cassandra-demo\n cassandraclusters.db.orange.com.dc=dc1\n cassandraclusters.db.orange.com.rack=rack1\n...\n")),(0,r.kt)("p",null,"Now, to trigger a ",(0,r.kt)("inlineCode",{parentName:"p"},"cleanup")," on pod ",(0,r.kt)("inlineCode",{parentName:"p"},"cassandra-demo-dc1-rack2-0")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl label pod cassandra-demo-dc1-rack2-0 operation-name=cleanup --overwrite\nkubectl label pod cassandra-demo-dc1-rack2-0 operation-status=ToDo --overwrite\n")),(0,r.kt)("p",null,"Automatically, CassKop will detect the change, start the action, and update the status :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    dc1-rack2:\n      cassandraLastAction:\n        Name: UpdateSeedList\n        endTime: 2018-09-27T15:26:51Z\n        startTime: 2018-09-27T15:23:54Z\n        status: Done\n      phase: Running\n      podLastOperation:\n        Name: cleanup\n        endTime: 2018-09-27T16:00:52Z\n        operatorName: operator-cassandr-f6d2968d4504448180ace041d3818d10-799dbb4zqss8\n        podsOK:\n        - cassandra-demo-dc1-rack2-0\n        - cassandra-demo-dc1-rack2-0\n        startTime: 2018-09-27T16:00:32Z\n        status: Done\n")),(0,r.kt)("p",null,"The section ",(0,r.kt)("inlineCode",{parentName:"p"},"podLastOperation")," appears and we can see that it has correctly executed the cleanup operation on the 2\nnodes"),(0,r.kt)("h2",{id:"operationrebuild"},"OperationRebuild"),(0,r.kt)("p",null,"This operation operates on multiple nodes in the cluster. Use this operation when CassKop add a new datacenter to an\nexisting cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl casskop rebuild {--pod <pod_name> | --prefix <prefix_pod_name>} <from-dc_name>\n")),(0,r.kt)("p",null,"In the background this command is equivalent to set labels on each pods like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl label pod cassandra-demo-dc2-rack1-0 operation-name=rebuild --overwrite\nkubectl label pod cassandra-demo-dc2-rack1-0 operation-status=ToDo --overwrite\nkubectl label pod cassandra-demo-dc2-rack1-0 operation-argument=dc1 --overwrite\n")),(0,r.kt)("h2",{id:"operationdecommission"},"OperationDecommission"),(0,r.kt)("p",null,"see ",(0,r.kt)("a",{parentName:"p",href:"/casskop/docs/operations/cluster_operations#updatescaledown"},"UpdateScaleDown")),(0,r.kt)("h2",{id:"rollingrestart"},"RollingRestart"),(0,r.kt)("p",null,"This operation can be triggered with the plugin using simple commands as :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-console"},"$ kubectl casskop restart --crd cassandra-e2e --rack dc1.rack1 dc2.rack1\n\nNamespace cassandra-e2e\nTrigger restart of dc1.rack1\nTrigger restart of dc2.rack1\n\n$ kubectl casskop restart --crd cassandra-e2e --dc dc1\n\nNamespace cassandra-e2e\nTrigger restart of dc1.rack1\nTrigger restart of dc1.rack2\n\n$ kubectl casskop restart --crd cassandra-e2e --full\n\nNamespace cassandra-e2e\nTrigger restart of dc1.rack1\nTrigger restart of dc1.rack2\nTrigger restart of dc2.rack1\n")),(0,r.kt)("p",null,"After one of this command, CassKop will do a rolling restart of each rack one at a time avoiding any disruption."))}u.isMDXComponent=!0}}]);